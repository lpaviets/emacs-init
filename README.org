* Emacs configuration

This repository contains an example of an Emacs configuration file, as well an Org Mode document that generates it.

Its purpose is both to share an example of a working configuration for Emacs from which you can pick up ideas, but that you can also choose to use without any modifications in order to get a modern IDE (and much more). Another interest is to provide an example of how you can use Emacs' Org Mode to write, organize and document manage your configuration files.

* Usage Instructions
** For everyone:

At several points within the configuration file, /something/ is needed to complete the installation. This can be an Emacs command that you need to run in order to install some package, or even a completely independent tool that you need to install (for example, the configuration uses the Language Server Protocol in order to implement IDE-like features such as syntax highlighting, code completion and so on. This requires the user to install a server for each language. Some of them can be installed directly from Emacs, but other require a more complex installation process).

In any case, such commands are explicitly marked by a *MANUAL* keyword within the =emacs-config.org= document. Please read them carefully before proceeding with the rest of the installation and loading the =init.el= file by starting emacs.

Please note that all of this configuration has only been tested on a GNU/Linux distribution. Although most packages should work the same on other systems, some of them (/e.g./ =lsp=) might be harder to configure in a different environment than what was intended by this configuration file. If you find any bug on other OS/on some Linux distributions, feel free to make a pull request if you succesfully solve them, or simply let me know so that I can investigate.

** Linux

1. Clone this repository to a folder on your system: =git clone https://github.com/lpaviets/emacs-init=
2. Back up any previous Emacs configuration, either located in a standalone file named =.emacs= at the root of your file system, or contained in a =.emacs.d= directory.
3. Rename the clone of this repository as =~/.emacs.d=. This will allow Emacs to automatically load its content at startup.
4. An alternate solution is to use the following command to start emacs with another configuration file: =emacs -l your-init-file.el=. The =-q= option tells Emacs to ignore any configuration file it might automatically find, which might be good to do some debugging if something does not work the way it should, and the =-l <path/to/file>= option tells it to use this file instead.
5. Start Emacs. If you encounter some problems, please make sure that you have correctly run all the necessary commands indicated by the *MANUAL* tag in the =emacs-config.org= file. If the problems nevertheless continue, you might want to start Emacs using the =emacs --debug-init= option to get more information on what the source of the problem might be.

** MacOS

** Windows

* Start using Emacs

If you are new to the Emacs world, it is normal to feel overwhelmed by what the editor can do and how to configure it properly to be able to do all those fancy things. However, it is possible to learn everything step-by-step, and there is a lot of documentation and tutorials to help you.

I will give a completely subjective view how what I consider to be the most important sections of this configuration file for you, in order to give a pleasant but complete experience.

** Important sections of this configuration

Here are, in order, the sections and subsections that I think will be the most helpful to understand and copy into your own configuration file if you are a complete beginner.

- *Initialization/Package Management*. It properly setups the access to various package repositories, and will install the =use-package= package, which makes everything not only look nicer but also easier to write.
- *UI Configuration/Visual interface changes*. Here, you will need to take a proper look at which options you want to enable or not. Most of them are self-explanatory or commented, and you should be able to handle it. In particular, it might a good idea to keep the menu-bar and the tool-bar at the beginning. This section includes:
  - *UI Configuration/Visual interface changes/Theme*. It gives a simple example on how to setup a theme. Of course, you do not have to use the same theme, but using a theme that you like will make everything more comfortable. [[https://emacsthemes.com/][Emacs Themes]], [[https://github.com/hlissner/emacs-doom-themes][Doom Themes]] or [[https://peach-melpa.org/][Peach Melpa]] are amongst the most popular places to find a theme, but feel free to explore the Web to find something that suits you.
- *UI Configuration/Minibuffer*. This section installs and configures various packages, all of them malking your like easier by giving access to a lot of information on the screen rapidly, whether it is documentation, command names, key sequences ...
- *UI Configuration/Help!* and *Commands/Help*. Those sections configure various improvements for the (already very deep) help and documentation system of Emacs. In particular, it adds two packages, namely =helpful= and =which-key=, which greatly improve the discoverability and understand of what you can do with Emacs.
- *Editing/Auto-completion/Company*. This section configures =company=, one of the two main package (along with =auto-complete=) used for auto-completion. Whether you are using Emacs to write source code, notes, documentation or even books, having a good auto-completion system and a nice interface for it will really help you. Please note that several things defined in this section only make sense when looking at the whole configuration (/e.g./ completion styles or how to handle company-backends), and they might be advanced concept that you do not necessarily need in order to start using Company.
- *LaTeX and PDF* Only if you are using LaTeX. If this is the case, then you definitely want to use those settings, as they will make your life much easier for visualizing the PDF files that you produce, to write LaTeX source code, to compile files that contain bibliography ...

Most of the other things can be ignored for the moment.

Of course, nothing forces you to stay away from the other features that this configuration file introduces, such as hydras or LSP for programming; however, most of them are either very opinionated - meaning that there are a lot of other good options to do same thing, and that they are very personal and subjective choices - or completely unnecessary most of the time (/e.g./ the =multiple-cursors= package, or a configuration of =SLY= to write Common Lisp). Furthermore, they often require to write a rather substantial amount of Emacs Lisp, and are sometimes not easy to understand, to debug or to configure according to your taste.

** While using Emacs

While inside the editor, you can already have access to a lot of helpful tools:

- At any point within Emacs, the =C-h t= command (you press the =Ctrl= and =h= keys at the same time, release them both, and then press =t=) will start a tutorial.
- The command =C-h r= will open the Emacs manual, in which you can find a lot of information by navigating around. If you want to look at other manuals that might be installed (/e.g./ for packages such as ~org-mode~, ~magit~ or ~AUCTeX~), then use =C-h i= instead.
- Using both the tutorial and the manual, one of the first thing you want to look at is how Emacs denotes (and uses) keys sequences to do things. This way, you will be able to understand the syntax of the various and often quite complex key sequences that you need to perform in order to get a certain result.
- If you are lost, the =C-h C-h= command (press the =Ctrl= and =h= keys at the same time, release them both, and press them both at the same time once again) will open a buffer giving you a brief overview of all the Help commands available. A useful one in the beginning is =C-h a=, that you can also run with the command =M-x apropos RET your-keywords RET= (press the Meta key -usually =Alt=- and x at the same time, then type =apropos= in the minibuffer area and then press the =Enter= key (also called =Return=) then type-in what you are looking for, and press =Enter= again), which will return a list of all the commands containing the keywords you asked for.
- Some manuals might not be installed by default. In some cases, you might need to change some variables and do relatively complex things, but most of the time, you simply need to install missing packages on your system. On Linux, installing the packages =emacs-common=  and =emacs-common-non-dfsg= (usually available in your standard packages repositories) will give you access to new manuals, that you can use directly from Emacs with the =C-h i= key sequence. Some packages, such as =Magit, SLY, AucTeX, Vertico ...=, even come with their own manual, so you can always look at their documentation offline and without having to read the source code !

** External resources

- The [[https://github.com/emacs-tw/awesome-emacs][awesome-emacs]] repository gives a detailed list of useful packages, sorted by (subjective) popularity/usefulness and themes. It also contains a brief list of places to learn Emacs at the end, so you can probably find many useful things there.
- [[https://tuhdo.github.io/emacs-tutor.html][The Emacs Mini Manual]] gives a very detailed tutorial on how to use Emacs, from commands to window management as well as several other features such as =dired= and =ido=.
- You can also find here [[https://www.gnu.org/software/emacs/tour/][here]] a Guided Tour of Emacs, giving an overview of the basic, built-in capabilities of the editor, from text-editing to writing mails, debugging code and playing Tetris.
- The  [[https://www.youtube.com/channel/UCAiiOTio8Yu69c3XnR7nQBQ][System Crafters]]'s Youtube channel is also an excellent place to start, as it has a lot of very basic content, and some series where you learn how to create a whole configuration from scratch.

* Additional resources

You might want to install some interesting new packages that are not already loaded in this configuration file.

Because there exist many Emacs packages, it might be frightening or even overwhelming to search for other packages that you could benefit from.

In order to solve this issue, [[https://github.com/emacs-tw/awesome-emacs][awesome-emacs]] is a place where you can start this research.

It references a lot of useful packages, some of which are already installed with this configuration file.

If you are a beginner, it also includes a list of tutorials or extra-sources for you to learn about Emacs and Emacs Lisp in general.

** Other configuration files

You can also take a look at other people [[https://github.com/grettke/every-emacs-initialization-file][configuration files]] to get an idea on how to write your own elisp code, what packages do other people use, and so much more.

Be careful though, some of these files are several thousands lines long !

Some other interesting ones:

- [[https://ladicle.com/post/config/][Ladicle's]] configuration file
- [[https://github.com/caisah/emacs.dz][Another list of nice config files]] on github
- [[https://github.com/farlado/dotemacs][An opinionated]] but complete and very detailed configuration
- [[https://luca.cambiaghi.me/vanilla-emacs/readme.html][Lucas Cambiaghi's]] configuration.
* TODO

List of things that could be added to this configuration file if needed, whether for me, or to share:

- [X] Hydra ! Install it, define some useful hydras (buffers, org-mode, dired ...), bind it to lsp-mode/ivy/projectile ...
  - [X] Install
  - [X] Modify hydras from the wiki
  - [X] Define some new hydras
- [-] Do things for other popular languages (Java and C# come to mind).
  - [ ] Setup C# with LSP-mode
  - [ ] Setup Java with LSP-mode
  - [X] Give [[https://github.com/joaotavora/eglot][eglot]] a try ?
- [X] System stuff: ~Tramp~, configure ~eshell~ or find an even better one, configure ~dired~ or upgrade it, etc
  - [X] ~eshell~ Basic improvements
  - [ ] Tramp explanation and configuration
  - [X] Dired improvement
- [X] Configure a Emacs-Lisp (and potentially Common Lisp ?) development environment.
  - [X] Install and configure SLIME (Used SLY instead)
- [ ] Regexp with [[https://github.com/joddie/pcre2el][pcre2el]] and may be other packages.
- [X] Setup Forge for Magit
- [-] Configure packages to replace other softwares
  - [ ] Configure a web browser, and ~gemini~
  - [X] Configure a mail client (~mu4e~ with ~mbsync~)
  - [ ] [[https://code.librehq.com/qhong/crdt.el][crdt]] for collaborative editing
- [X] Point to funny/absurd packages (/e.g./ ~speed-type~, ~key-quiz~ ...)
